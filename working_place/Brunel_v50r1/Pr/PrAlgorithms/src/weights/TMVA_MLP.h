// Class: ReadMLP
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.06/00       [394752]
Creator        : tnikodem
Date           : Tue Mar  8 12:17:09 2016
Host           : Linux lcgapp-slc6-physical1.cern.ch 2.6.32-573.8.1.el6.x86_64 #1 SMP Wed Nov 11 15:27:45 CET 2015 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /afs/cern.ch/work/t/tnikodem/work/FwdFitParams2/NeedforSpeed_Forward/Brunel_v49r1/runBrunel/TMVA
Training events: 476110
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "500" [Number of training cycles]
HiddenLayers: "N+3,N+2,N" [Specification of hidden layer architecture]
NeuronType: "ReLU" [Neuron activation function type]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "True" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 7
nPlanes                       nPlanes                       nPlanes                       nPlanes                                                         'I'    [10,12]
abs(dSlope)                   p                             p                             p                                                               'F'    [9.85095383044e-09,0.000802951282822]
dp                            dp                            dp                            dp                                                              'F'    [-0.00146533316001,0.00210911408067]
slope2                        slope2                        slope2                        slope2                                                          'F'    [8.73411772773e-05,0.162097111344]
dby                           dby                           dby                           dby                                                             'F'    [-0.183235824108,0.190017551184]
dbx                           dbx                           dbx                           dbx                                                             'F'    [-0.0267688632011,0.0250341296196]
day                           day                           day                           day                                                             'F'    [-176.100891113,166.13961792]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual float GetMvaValue( std::vector<float>& inputValues ) const = 0;

};

#endif

class ReadMLP : public IClassifierReader {

 public:

   // constructor
   ReadMLP( std::vector<std::string>& theInputVars ) 
      : IClassifierReader(),
        fClassName( "ReadMLP" ),
        fNvars( 7 )
   {      
      // the training input variables
      const char* inputVars[] = { "nPlanes", "abs(dSlope)", "dp", "slope2", "dby", "dbx", "day" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         return;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         return;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
         return;
         }
      }

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform_1();
   }

   // destructor
   virtual ~ReadMLP() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   // WARNING: inputVariables will be modified
   inline float GetMvaValue( std::vector<float>& iV ) const
   {
      //Normalize input
      Transform_1( iV);

      return GetMvaValue__( iV );
   }


 private:

  // method-specific destructor
  inline void Clear() 
  {
     // clean up the arrays
     for (int lIdx = 0; lIdx < 5; lIdx++) {
        delete[] fWeights[lIdx];
     }
  }

  // input variable transformation

  float fMin_1[3][7];
  float fMax_1[3][7];

  inline void InitTransform_1()
  {
     // Normalization transformation, initialisation
     fMin_1[0][0] = 10;
     fMax_1[0][0] = 12;
     fMin_1[1][0] = 10;
     fMax_1[1][0] = 12;
     fMin_1[2][0] = 10;
     fMax_1[2][0] = 12;
     fMin_1[0][1] = 1.2182580349e-06;
     fMax_1[0][1] = 0.000741880794521;
     fMin_1[1][1] = 9.85095383044e-09;
     fMax_1[1][1] = 0.000802951282822;
     fMin_1[2][1] = 9.85095383044e-09;
     fMax_1[2][1] = 0.000802951282822;
     fMin_1[0][2] = -0.000981813995168;
     fMax_1[0][2] = 0.00210911408067;
     fMin_1[1][2] = -0.00146533316001;
     fMax_1[1][2] = 0.00174438382965;
     fMin_1[2][2] = -0.00146533316001;
     fMax_1[2][2] = 0.00210911408067;
     fMin_1[0][3] = 8.73411772773e-05;
     fMax_1[0][3] = 0.162097111344;
     fMin_1[1][3] = 8.73411772773e-05;
     fMax_1[1][3] = 0.156711220741;
     fMin_1[2][3] = 8.73411772773e-05;
     fMax_1[2][3] = 0.162097111344;
     fMin_1[0][4] = -0.0797790139914;
     fMax_1[0][4] = 0.075917840004;
     fMin_1[1][4] = -0.183235824108;
     fMax_1[1][4] = 0.190017551184;
     fMin_1[2][4] = -0.183235824108;
     fMax_1[2][4] = 0.190017551184;
     fMin_1[0][5] = -0.0200970172882;
     fMax_1[0][5] = 0.0213204622269;
     fMin_1[1][5] = -0.0267688632011;
     fMax_1[1][5] = 0.0250341296196;
     fMin_1[2][5] = -0.0267688632011;
     fMax_1[2][5] = 0.0250341296196;
     fMin_1[0][6] = -146.089233398;
     fMax_1[0][6] = 145.475341797;
     fMin_1[1][6] = -176.100891113;
     fMax_1[1][6] = 166.13961792;
     fMin_1[2][6] = -176.100891113;
     fMax_1[2][6] = 166.13961792;
  }
  
  //_______________________________________________________________________
  inline void Transform_1( std::vector<float>& iv) const
  {
     const int cls = 2; //what are the other???
     const int nVar = 7;
  
     for (int ivar=0;ivar<nVar;ivar++) {
        const float offset = fMin_1[cls][ivar];
        const float scale  = 1.0/(fMax_1[cls][ivar]-fMin_1[cls][ivar]); //TODO speed this up. but then not easy to update :(
        iv[ivar] = (iv[ivar]-offset)*scale * 2. - 1.;
     }
  }

  // common member variables
  const char* fClassName;
  const size_t fNvars;

  // initialize internal variables
  inline void Initialize()
  {
     // build network structure
     fLayers = 5;
     fLayerSize[0] = 8;  fWeights[0] = new float[8]; 
     fLayerSize[1] = 11; fWeights[1] = new float[11]; 
     fLayerSize[2] = 10; fWeights[2] = new float[10]; 
     fLayerSize[3] = 8;  fWeights[3] = new float[8]; 
     fLayerSize[4] = 1;  fWeights[4] = new float[1]; 
     // weight matrix from layer 0 to 1
     fWeightMatrix0to1[0][0] = 0.0444793427453374;
     fWeightMatrix0to1[1][0] = -0.0144295636946327;
     fWeightMatrix0to1[2][0] = 0.0392402539549583;
     fWeightMatrix0to1[3][0] = 0.0400441158615197;
     fWeightMatrix0to1[4][0] = -0.000628094247915921;
     fWeightMatrix0to1[5][0] = 0.000920370104460698;
     fWeightMatrix0to1[6][0] = -9.51131662037325;
     fWeightMatrix0to1[7][0] = 0.0343889963411749;
     fWeightMatrix0to1[8][0] = -0.00180484732630874;
     fWeightMatrix0to1[9][0] = 0.157048782120273;
     fWeightMatrix0to1[0][1] = -0.205591892293898;
     fWeightMatrix0to1[1][1] = 1.01103489740901;
     fWeightMatrix0to1[2][1] = -6.41371828796761;
     fWeightMatrix0to1[3][1] = 3.82054549025114;
     fWeightMatrix0to1[4][1] = -0.471420850553842;
     fWeightMatrix0to1[5][1] = 5.35794990354565;
     fWeightMatrix0to1[6][1] = -3.01435312509061;
     fWeightMatrix0to1[7][1] = 0.441348541741612;
     fWeightMatrix0to1[8][1] = 3.8328964711019;
     fWeightMatrix0to1[9][1] = 0.18420324265465;
     fWeightMatrix0to1[0][2] = 15.4322458597963;
     fWeightMatrix0to1[1][2] = 5.28290022561434;
     fWeightMatrix0to1[2][2] = -2.02120322510048;
     fWeightMatrix0to1[3][2] = -25.3049671789754;
     fWeightMatrix0to1[4][2] = 15.6813611339455;
     fWeightMatrix0to1[5][2] = 1.38241370339511;
     fWeightMatrix0to1[6][2] = 2.92468259938176;
     fWeightMatrix0to1[7][2] = -61.5700315876693;
     fWeightMatrix0to1[8][2] = 7.16423741647741;
     fWeightMatrix0to1[9][2] = 2.3874396743057;
     fWeightMatrix0to1[0][3] = -4.81895999528389;
     fWeightMatrix0to1[1][3] = -1.25608930850478;
     fWeightMatrix0to1[2][3] = 10.5225030815411;
     fWeightMatrix0to1[3][3] = 20.0677672299534;
     fWeightMatrix0to1[4][3] = -7.09484986290146;
     fWeightMatrix0to1[5][3] = 9.01420832726632;
     fWeightMatrix0to1[6][3] = 12.8491113249304;
     fWeightMatrix0to1[7][3] = -1.45232338792987;
     fWeightMatrix0to1[8][3] = -0.101041654087678;
     fWeightMatrix0to1[9][3] = -0.425466827082585;
     fWeightMatrix0to1[0][4] = -4.62244959687703;
     fWeightMatrix0to1[1][4] = 0.079954185332624;
     fWeightMatrix0to1[2][4] = 0.059688571394951;
     fWeightMatrix0to1[3][4] = 8.66193118089462;
     fWeightMatrix0to1[4][4] = -2.46590257400717;
     fWeightMatrix0to1[5][4] = 0.489989302470594;
     fWeightMatrix0to1[6][4] = -5.42241168854053;
     fWeightMatrix0to1[7][4] = 0.118144661473119;
     fWeightMatrix0to1[8][4] = 0.493649697346599;
     fWeightMatrix0to1[9][4] = 36.0680596831104;
     fWeightMatrix0to1[0][5] = -6.37336955835161;
     fWeightMatrix0to1[1][5] = 32.4291880938379;
     fWeightMatrix0to1[2][5] = -0.36600651055565;
     fWeightMatrix0to1[3][5] = -0.78946285397557;
     fWeightMatrix0to1[4][5] = -3.36156978537637;
     fWeightMatrix0to1[5][5] = 2.01174177997903;
     fWeightMatrix0to1[6][5] = 0.9166859494319;
     fWeightMatrix0to1[7][5] = -9.62311157873168;
     fWeightMatrix0to1[8][5] = -8.60099180266935;
     fWeightMatrix0to1[9][5] = 0.238582174540705;
     fWeightMatrix0to1[0][6] = -29.8227026466643;
     fWeightMatrix0to1[1][6] = -2.24881264072912;
     fWeightMatrix0to1[2][6] = 1.52229712669016;
     fWeightMatrix0to1[3][6] = 1.61130964728043;
     fWeightMatrix0to1[4][6] = 29.1982323579036;
     fWeightMatrix0to1[5][6] = 1.32733390320645;
     fWeightMatrix0to1[6][6] = 0.866007266120508;
     fWeightMatrix0to1[7][6] = 5.32158121776729;
     fWeightMatrix0to1[8][6] = 2.1784459839636;
     fWeightMatrix0to1[9][6] = -4.67528223390099;
     fWeightMatrix0to1[0][7] = -0.839587150739895;
     fWeightMatrix0to1[1][7] = -0.271228151982612;
     fWeightMatrix0to1[2][7] = 5.42312193023043;
     fWeightMatrix0to1[3][7] = 19.5308135638927;
     fWeightMatrix0to1[4][7] = -4.6725514903423;
     fWeightMatrix0to1[5][7] = 8.14836070611856;
     fWeightMatrix0to1[6][7] = 2.2892085750978;
     fWeightMatrix0to1[7][7] = -12.0419059187866;
     fWeightMatrix0to1[8][7] = 5.11362311435466;
     fWeightMatrix0to1[9][7] = 1.14908442708376;
     // weight matrix from layer 1 to 2
     fWeightMatrix1to2[0][0] = -0.701548735802826;
     fWeightMatrix1to2[1][0] = 0.169458114252474;
     fWeightMatrix1to2[2][0] = -0.404743580798003;
     fWeightMatrix1to2[3][0] = 0.128241816249659;
     fWeightMatrix1to2[4][0] = -1.15908034350904;
     fWeightMatrix1to2[5][0] = -1.88015246812133;
     fWeightMatrix1to2[6][0] = 1.39154483645388;
     fWeightMatrix1to2[7][0] = -5.23267085094998;
     fWeightMatrix1to2[8][0] = 0.0886973112691878;
     fWeightMatrix1to2[0][1] = 0.375790069104004;
     fWeightMatrix1to2[1][1] = 0.907107136856126;
     fWeightMatrix1to2[2][1] = -0.417080427582701;
     fWeightMatrix1to2[3][1] = 0.970944372315718;
     fWeightMatrix1to2[4][1] = -1.43698123922536;
     fWeightMatrix1to2[5][1] = -1.94507040923045;
     fWeightMatrix1to2[6][1] = 0.41271940782432;
     fWeightMatrix1to2[7][1] = -0.309602384256231;
     fWeightMatrix1to2[8][1] = 0.488064588899332;
     fWeightMatrix1to2[0][2] = 1.03537940814751;
     fWeightMatrix1to2[1][2] = 1.56453875056451;
     fWeightMatrix1to2[2][2] = -2.36787616203543;
     fWeightMatrix1to2[3][2] = 0.969550327695414;
     fWeightMatrix1to2[4][2] = -1.40576526989911;
     fWeightMatrix1to2[5][2] = -0.76872530111594;
     fWeightMatrix1to2[6][2] = 2.14891804098473;
     fWeightMatrix1to2[7][2] = 1.03764864760707;
     fWeightMatrix1to2[8][2] = -0.256574057726185;
     fWeightMatrix1to2[0][3] = -0.504878238222252;
     fWeightMatrix1to2[1][3] = -0.626972522517382;
     fWeightMatrix1to2[2][3] = -1.50783446685588;
     fWeightMatrix1to2[3][3] = -3.02275250515463;
     fWeightMatrix1to2[4][3] = 0.685712542141615;
     fWeightMatrix1to2[5][3] = 0.162600595827753;
     fWeightMatrix1to2[6][3] = -0.78408019879241;
     fWeightMatrix1to2[7][3] = -0.776037639515633;
     fWeightMatrix1to2[8][3] = 1.23914999599046;
     fWeightMatrix1to2[0][4] = 0.62790430335254;
     fWeightMatrix1to2[1][4] = -0.339232999877941;
     fWeightMatrix1to2[2][4] = -0.262189538606551;
     fWeightMatrix1to2[3][4] = -0.152409385953069;
     fWeightMatrix1to2[4][4] = -0.564840766982145;
     fWeightMatrix1to2[5][4] = -1.16621454235772;
     fWeightMatrix1to2[6][4] = -3.44551118447853;
     fWeightMatrix1to2[7][4] = 2.00489167385837;
     fWeightMatrix1to2[8][4] = -0.32722200642611;
     fWeightMatrix1to2[0][5] = -1.80004497849975;
     fWeightMatrix1to2[1][5] = -0.500809513546725;
     fWeightMatrix1to2[2][5] = 1.69466413331993;
     fWeightMatrix1to2[3][5] = -2.38268429885551;
     fWeightMatrix1to2[4][5] = -2.78252372936038;
     fWeightMatrix1to2[5][5] = -1.31812137003339;
     fWeightMatrix1to2[6][5] = -4.07432866590443;
     fWeightMatrix1to2[7][5] = -2.77885349950969;
     fWeightMatrix1to2[8][5] = -2.66894389689084;
     fWeightMatrix1to2[0][6] = -5.47981182847159;
     fWeightMatrix1to2[1][6] = -0.976537931486031;
     fWeightMatrix1to2[2][6] = 3.27791132087532;
     fWeightMatrix1to2[3][6] = 0.321753558081832;
     fWeightMatrix1to2[4][6] = -0.557081896152287;
     fWeightMatrix1to2[5][6] = 0.194731265768434;
     fWeightMatrix1to2[6][6] = -0.105984495724227;
     fWeightMatrix1to2[7][6] = 0.905276319923381;
     fWeightMatrix1to2[8][6] = -3.14913569838463;
     fWeightMatrix1to2[0][7] = 0.783664078199687;
     fWeightMatrix1to2[1][7] = -0.0858203555376469;
     fWeightMatrix1to2[2][7] = 1.73598944495596;
     fWeightMatrix1to2[3][7] = 2.13218485891327;
     fWeightMatrix1to2[4][7] = -1.54743897131713;
     fWeightMatrix1to2[5][7] = -2.23581227502823;
     fWeightMatrix1to2[6][7] = 1.0873255028893;
     fWeightMatrix1to2[7][7] = 0.899309753887173;
     fWeightMatrix1to2[8][7] = -1.32261925951639;
     fWeightMatrix1to2[0][8] = -0.116112312352237;
     fWeightMatrix1to2[1][8] = 1.68639819101751;
     fWeightMatrix1to2[2][8] = -0.557687981732908;
     fWeightMatrix1to2[3][8] = 0.877613008568652;
     fWeightMatrix1to2[4][8] = -1.80192270344288;
     fWeightMatrix1to2[5][8] = -2.59810887730527;
     fWeightMatrix1to2[6][8] = -1.19004639511737;
     fWeightMatrix1to2[7][8] = -2.09121263179231;
     fWeightMatrix1to2[8][8] = 1.16929265042024;
     fWeightMatrix1to2[0][9] = -5.37482614876952;
     fWeightMatrix1to2[1][9] = -0.434109741984185;
     fWeightMatrix1to2[2][9] = 1.85759358510227;
     fWeightMatrix1to2[3][9] = 1.06969341721201;
     fWeightMatrix1to2[4][9] = -0.512798253552821;
     fWeightMatrix1to2[5][9] = -0.399301289391809;
     fWeightMatrix1to2[6][9] = 0.963236033364369;
     fWeightMatrix1to2[7][9] = 1.15991897596558;
     fWeightMatrix1to2[8][9] = -1.78131135808102;
     fWeightMatrix1to2[0][10] = 2.52767978193748;
     fWeightMatrix1to2[1][10] = -1.36886479210668;
     fWeightMatrix1to2[2][10] = 4.29800586291959;
     fWeightMatrix1to2[3][10] = 2.72424500284721;
     fWeightMatrix1to2[4][10] = 7.97193785594913;
     fWeightMatrix1to2[5][10] = 6.81581108717456;
     fWeightMatrix1to2[6][10] = 0.569329606974368;
     fWeightMatrix1to2[7][10] = 0.6179169475325;
     fWeightMatrix1to2[8][10] = -3.85213702026576;
     // weight matrix from layer 2 to 3
     fWeightMatrix2to3[0][0] = -1.49800896204504;
     fWeightMatrix2to3[1][0] = -0.221897082186421;
     fWeightMatrix2to3[2][0] = -0.137311922179414;
     fWeightMatrix2to3[3][0] = -0.082240990994086;
     fWeightMatrix2to3[4][0] = -1.78210095071936;
     fWeightMatrix2to3[5][0] = -0.529830552062526;
     fWeightMatrix2to3[6][0] = 0.635357877680441;
     fWeightMatrix2to3[0][1] = -0.0888855859361656;
     fWeightMatrix2to3[1][1] = -0.504428405229978;
     fWeightMatrix2to3[2][1] = -0.536752415942747;
     fWeightMatrix2to3[3][1] = -0.641824237122418;
     fWeightMatrix2to3[4][1] = -1.09261880886916;
     fWeightMatrix2to3[5][1] = -2.00925372317977;
     fWeightMatrix2to3[6][1] = -0.213699859132466;
     fWeightMatrix2to3[0][2] = 0.650676995646862;
     fWeightMatrix2to3[1][2] = -0.588338041897771;
     fWeightMatrix2to3[2][2] = -0.162505043685777;
     fWeightMatrix2to3[3][2] = -1.95272187731799;
     fWeightMatrix2to3[4][2] = -0.326921769177356;
     fWeightMatrix2to3[5][2] = -1.30953495623101;
     fWeightMatrix2to3[6][2] = -0.184184178524862;
     fWeightMatrix2to3[0][3] = -0.0654039698534511;
     fWeightMatrix2to3[1][3] = -0.460381398922287;
     fWeightMatrix2to3[2][3] = 0.683826649247182;
     fWeightMatrix2to3[3][3] = -2.09527640852027;
     fWeightMatrix2to3[4][3] = -0.279460051966318;
     fWeightMatrix2to3[5][3] = 1.6915243403735;
     fWeightMatrix2to3[6][3] = 0.498351131228211;
     fWeightMatrix2to3[0][4] = -1.16185258147879;
     fWeightMatrix2to3[1][4] = 0.539845162187543;
     fWeightMatrix2to3[2][4] = -0.688017912732639;
     fWeightMatrix2to3[3][4] = 0.155415196650244;
     fWeightMatrix2to3[4][4] = -0.452484581540862;
     fWeightMatrix2to3[5][4] = -1.21312736725235;
     fWeightMatrix2to3[6][4] = -0.506009857190592;
     fWeightMatrix2to3[0][5] = -1.06335288025746;
     fWeightMatrix2to3[1][5] = 1.37775075249758;
     fWeightMatrix2to3[2][5] = 0.0603508625095801;
     fWeightMatrix2to3[3][5] = 0.879263346564976;
     fWeightMatrix2to3[4][5] = 0.279389707560548;
     fWeightMatrix2to3[5][5] = -1.75715542351656;
     fWeightMatrix2to3[6][5] = -0.241606776118331;
     fWeightMatrix2to3[0][6] = 0.174342163093014;
     fWeightMatrix2to3[1][6] = -0.298521350949171;
     fWeightMatrix2to3[2][6] = 0.612082026082461;
     fWeightMatrix2to3[3][6] = -0.454067210889449;
     fWeightMatrix2to3[4][6] = -1.39691601135445;
     fWeightMatrix2to3[5][6] = -2.99986762397397;
     fWeightMatrix2to3[6][6] = -1.1029515102531;
     fWeightMatrix2to3[0][7] = 0.44442038754818;
     fWeightMatrix2to3[1][7] = -0.288269199813478;
     fWeightMatrix2to3[2][7] = -1.50288845517417;
     fWeightMatrix2to3[3][7] = -1.19680259536787;
     fWeightMatrix2to3[4][7] = -0.68670869462637;
     fWeightMatrix2to3[5][7] = -4.75196298633715;
     fWeightMatrix2to3[6][7] = 0.247445786524772;
     fWeightMatrix2to3[0][8] = -3.11912856543641;
     fWeightMatrix2to3[1][8] = 0.504089551298191;
     fWeightMatrix2to3[2][8] = 0.0796200015013274;
     fWeightMatrix2to3[3][8] = -1.93855271626541;
     fWeightMatrix2to3[4][8] = -1.86333120468687;
     fWeightMatrix2to3[5][8] = -0.957560971909364;
     fWeightMatrix2to3[6][8] = -0.122191656053833;
     fWeightMatrix2to3[0][9] = -0.538318002773102;
     fWeightMatrix2to3[1][9] = 3.61908474583654;
     fWeightMatrix2to3[2][9] = 0.0320511503477029;
     fWeightMatrix2to3[3][9] = -1.83224812659092;
     fWeightMatrix2to3[4][9] = -2.1323062506084;
     fWeightMatrix2to3[5][9] = 1.14604474018186;
     fWeightMatrix2to3[6][9] = 0.580564031910065;
     // weight matrix from layer 3 to 4
     fWeightMatrix3to4[0][0] = -0.329736815381767;
     fWeightMatrix3to4[0][1] = 0.594098530413458;
     fWeightMatrix3to4[0][2] = -0.402519929770391;
     fWeightMatrix3to4[0][3] = -0.604287548350414;
     fWeightMatrix3to4[0][4] = 0.808018511013525;
     fWeightMatrix3to4[0][5] = 0.5291070708734;
     fWeightMatrix3to4[0][6] = -0.424612133293594;
     fWeightMatrix3to4[0][7] = 0.483403846006829;
  }

  inline float GetMvaValue__( const std::vector<float>& inputValues ) const
  {
    //TODO check auto vectorization here: 'not vectorized: unsupported use in stmt' , 'Unsupported pattern'
  
     for (int l=0; l<fLayers; l++)
        for (int i=0; i<fLayerSize[l]; i++) fWeights[l][i]=0.f;
  
     for (int l=0; l<fLayers-1; l++)
        fWeights[l][fLayerSize[l]-1]=1.f;
  
     for (int i=0; i<7; i++)
        fWeights[0][i]=inputValues[i];
  
     // layer 0 to 1
     for (int o=0; o<10; o++) {
        for (int i=0; i<8; i++) {
           float inputVal = fWeightMatrix0to1[o][i] * fWeights[0][i];
           fWeights[1][o] += inputVal;
        }
        fWeights[1][o] = ActivationFnc(fWeights[1][o]);
     }
     // layer 1 to 2
     for (int o=0; o<9; o++) {
        for (int i=0; i<11; i++) {
           float inputVal = fWeightMatrix1to2[o][i] * fWeights[1][i];
           fWeights[2][o] += inputVal;
        }
        fWeights[2][o] = ActivationFnc(fWeights[2][o]);
     }
     // layer 2 to 3
     for (int o=0; o<7; o++) {
        for (int i=0; i<10; i++) {
           float inputVal = fWeightMatrix2to3[o][i] * fWeights[2][i];
           fWeights[3][o] += inputVal;
        }
        fWeights[3][o] = ActivationFnc(fWeights[3][o]);
     }
     // layer 3 to 4
     for (int i=0; i<8; i++) {
       float inputVal = fWeightMatrix3to4[0][i] * fWeights[3][i];
       fWeights[4][0] += inputVal;
     }
     return OutputActivationFnc(fWeights[4][0]);
  
  }

  inline float ActivationFnc(float x) const {
     // rectified linear unit
     return x*(x>0); 
  }

  //TODO do we need exp here? can we live with pure x output?!
  inline float OutputActivationFnc(float x) const {
     // sigmoid
     return 1.0/(1.0+exp(-x));
  }
   

  int fLayers;
  int fLayerSize[5];
  float fWeightMatrix0to1[11][8];   // weight matrix from layer 0 to 1
  float fWeightMatrix1to2[10][11];   // weight matrix from layer 1 to 2
  float fWeightMatrix2to3[8][10];   // weight matrix from layer 2 to 3
  float fWeightMatrix3to4[1][8];   // weight matrix from layer 3 to 4

  float * fWeights[5];

};

